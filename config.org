#+TITLE: Emacs configuration
#+AUTHOR: Steffen Fiedler

* Installation

** Personal

#+BEGIN_SRC emacs-lisp
  (load (concat user-emacs-directory "secrets.el"))
  (setq user-full-name full-name
        user-mail-address email-address)
#+END_SRC

** Paths

Define base directory for all org files.

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Library/Mobile Documents/com~apple~CloudDocs/org/")
#+END_SRC

** Package archives

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives '(("elpa-gnu" . "http://elpa.gnu.org/packages/")
                           ("elpa-nongnu" . "https://elpa.nongnu.org/nongnu/")
                           ("melpa-stable" . "http://stable.melpa.org/packages/")
                           ("melpa" . "http://melpa.org/packages/")))

  (setq package-archive-priorities '(("melpa-stable" . 50)
                                     ("elpa-gnu" . 10)
                                     ("marmalade" . 10)
                                     ("melpa" . 0)))
  (unless package--initialized (package-initialize t))
  ;; bootstrap use-package (http://www.lunaryorn.com/)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; and call it?
  (eval-when-compile (require 'use-package))
  (when (not package-archive-contents)
    (package-refresh-contents))
#+END_SRC
* Sane defaults

** Hide warnings

*** Package cl is deprecated

Emacs > 27 displays warning when `cl` is required. (see [issue](https://github.com/kiwanami/emacs-epc/issues/35))
#+BEGIN_SRC emacs-lisp
  (setq byte-compile-warnings '(cl-functions))
#+END_SRC

** Default directory

Defines user root as default directory.

#+BEGIN_SRC emacs-lisp
  (setq default-directory "~/")
#+END_SRC

** Remember recent files

`(M-x) recentf-open-file` select a recently opened file from list.

#+begin_src emacs-lisp
  (recentf-mode 1)
#+end_src

** ZSH configuration

https://github.com/Wilfred/ag.el/issues/93

#+BEGIN_SRC emacs-lisp
  (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
#+END_SRC

** Don't pop up UI dialogs

#+begin_src emacs-lisp
  (setq use-dialog-box nil)
#+end_src

** Auto revert

When something changes a file, automatically refresh the buffer containing that file so they can’t get out of sync.

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

Apply the same behavior to non-file buffers, such as dired.

#+begin_src emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
#+end_src

** Regions

#+BEGIN_SRC emacs-lisp
  ;; These functions are useful. Activate them.
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
#+END_SRC

** dired

#+BEGIN_SRC emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

** Stop creating backup files

Save and commit often instead of relying on emacs' automatic backup~ files.

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

And disable emacs' #auto-save# files.

#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil)
#+END_SRC

** UTF-8 everywhere

#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top
  (setq slime-net-coding-system 'utf-8-unix)
#+END_SRC

** Indentation and tabs

Make indentation commands use space only, never tab characters

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

Set default tab char's display width to 4 spaces.

#+BEGIN_SRC emacs-lisp
  (setq-default
   tab-width 2
   js-indent-level 2)
#+END_SRC

** 'y' or 'n' short handles will do

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Replace selected with any kind of input
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC
** Enable systems clipboard manager interactions
#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-clipboard t
        x-select-enable-primary t)
#+END_SRC
** Stop 'donking
No negative speaker feedback.
#+BEGIN_SRC emacs-lisp
  (setq visible-bell t)
#+END_SRC
** Default browser
Stay in emacs when opening URLs and use eww as standard browser.
#+begin_src emacs-lisp
  (setq browse-url-browser-function 'eww-browse-url)
#+end_src
** Adaptive cursor width
Make the cursor the full width of the character it is under – e.g. the full width of a TAB character (from [[http://pragmaticemacs.com/emacs/adaptive-cursor-width/][pragmatic emacs]]).
#+BEGIN_SRC emacs-lisp
  (setq x-stretch-cursor t)
#+END_SRC
** Highlight matching pairs of parentheses
#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src
Disable the default delay.
#+begin_src emacs-lisp
  (setq show-paren-delay 0)
#+end_src
* Mac defaults
#+BEGIN_SRC emacs-lisp
  (when (string-equal system-type "darwin")
    ;; Non-native fullscreen
    (setq ns-use-native-fullscreen nil)
    ;; delete files by moving them to the trash
    (setq delete-by-moving-to-trash t)
    (setq trash-directory "~/.Trash")

    ;; Don't make new frames when opening a new file with Emacs
    (setq ns-pop-up-frames nil)

    ;; set the Fn key as the hyper key
    (setq ns-function-modifier 'hyper)

    ;; Use Command-` to switch between Emacs windows (not frames)
    (bind-key "s-`" 'other-window)

    ;; Use Command-Shift-` to switch Emacs frames in reverse
    (bind-key "s-~" (lambda() () (interactive) (other-window -1)))

    ;; Because of the keybindings above, set one for `other-frame'
    (bind-key "s-1" 'other-frame)

    ;; Fullscreen!
    (setq ns-use-native-fullscreen nil) ; Not Lion style
    (bind-key "<s-return>" 'toggle-frame-fullscreen)

    ;; buffer switching
    (bind-key "s-{" 'previous-buffer)
    (bind-key "s-}" 'next-buffer)

    ;; disable the key that minimizes emacs to the dock because I don't
    ;; minimize my windows
    (global-unset-key (kbd "C-z"))

    ;; Not going to use these commands
    (put 'ns-print-buffer 'disabled t)
    (put 'suspend-frame 'disabled t))
#+END_SRC
* Navigating buffers
Switch to next window with `M-o` instead of `C-x o`.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
#+END_SRC
* EasyPG encryption
#+BEGIN_SRC emacs-lisp
  (use-package epa-file
    :ensure nil
    :config
    (setq
     epa-file-enable t
     epa-file-encrypt-to email-address
     epa-file-select-keys nil
     epa-file-cache-passphrase-for-symmetric-encryption t
     epa-pinentry-mode 'loopback
     epg-gpg-program "gpg"
     epg-debug t)
    :custom
    (epa-file-select-keys 'silent))
#+END_SRC

Defining `epa-pinentry-mode 'loopback` enables the passphrase entering through minibuffer as pointed out by [[https://colinxy.github.io/software-installation/2016/09/24/emacs25-easypg-issue.html][colinxy]].

To encrypt any file with a public key associated for a receiver address, add the following line to the beginning of the file.

#+BEGIN_SRC txt
;; -*- epa-file-encrypt-to: ("me@domain.com") -*-
#+END_SRC

In case of an `.org` file use.

#+BEGIN_SRC txt
# -*- mode:org; epa-file-encrypt-to: ("me@domain.com") -*-
#+END_SRC

The passphrase will be cached depending on the configuration in `~/.gnupg/gpg-agent.conf`.

#+BEGIN_SRC txt
default-cache-ttl 600
max-cache-ttl 7200
#+END_SRC
* Fonts

Store the [[https://berkeleygraphics.com/typefaces/berkeley-mono/][Berkeley Mono]] Typeface in size 14 as symbol to use for any typeface decisions.

#+begin_src emacs-lisp
  (setq
   global-font "Berkeley Mono-16")
#+end_src

Set the overall font as general frame font.

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (set-frame-font global-font)
    ;; Use Spotlight to search with M-x locate
    (setq locate-command "mdfind"))
#+END_SRC

And explicitly use the overall font in orgmode's blocks and tables.

#+begin_src emacs-lisp
  (set-face-attribute 'fixed-pitch nil :font global-font)
#+end_src

Avoid goofy serif fonts when rendering web content (shr, eww).

#+begin_src emacs-lisp
  (setq shr-use-fonts nil)
#+end_src
* Theme

Load custom themes from `themes/` folder.

#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
#+end_src

** Modus
#+begin_src emacs-lisp
  (use-package modus-themes
    :ensure nil
    :init
    ;; All customizations go here
    (setq modus-themes-mixed-fonts nil
          modus-themes-syntax '(green-strings)
          modus-themes-mode-line '(borderless)
          modus-themes-org-blocks 'gray-background
          modus-themes-paren-match '(bold intense))
    (setq modus-themes-vivendi-color-overrides
          '((bg-main . "#111212")
            (fg-main . "#c2c2c2")))
    ;; Load theme of choice
    (load-theme 'modus-vivendi)
    :bind ("<f5>" . modus-themes-toggle))
#+end_src

* Avy

Package for jumping to visible text using a char-based decision tree.

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :pin melpa-stable
    :bind
    ("C-:" . avy-goto-char))
#+END_SRC
** Keys
| Binding | Description       |
|---------+-------------------|
| `C-:`   | Jump to character |
* Cider
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t
    :pin melpa-stable
    :config
    (setq nrepl-use-ssh-fallback-for-remote-hosts t))
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :defer t
    :config
    (setq
     company-tooltip-limit 10
     company-idle-delay 0.3
     company-echo-delay 0
     company-minimum-prefix-length 1
     company-require-match nil
     company-tooltip-flip-when-above t
     company-transformers '(company-sort-by-occurrence))
    :init (global-company-mode))
#+END_SRC

* Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :pin melpa-stable
    :bind
    ("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file)
    ("C-c g" . counsel-git)
    ("C-x l" . counsel-locate)
    :config
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
#+END_SRC
* Csv

[csv-mode](https://elpa.gnu.org/packages/csv-mode.html)
#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :ensure t
    :pin elpa-gnu
    :init
    (setq csv-separators '("," ";" "\t"))
    (add-to-list 'auto-mode-alist '("\\.[CcTt][Ss][Vv]\\'" . csv-mode)))
#+END_SRC
** Keys
| Binding   | Description                          |
|-----------+--------------------------------------|
| `C-c C-a` | Aligns column width to maximum width |
| `C-c C-u` | Undoes alignment, to source          |
* Docker

[docker.el](https://github.com/Silex/docker.el) supports docker containers, images, volumes, networks and docker-compose.

#+BEGIN_SRC emacs-lisp
  (use-package docker
    :ensure t
    :pin melpa
    :bind ("C-c d" . docker))
#+END_SRC

For editing 'Dockerfile' formats.

#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :pin melpa)
#+end_src

* Exec-path-from-shell
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :pin melpa-stable)

  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+END_SRC
* Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :pin melpa-stable
    :bind ("C-=" . 'er/expand-region))
#+END_SRC

** Keys
| Binding   | Description |
|-----------+-------------|
| `C-=`     | expand      |
| `C-- C-=` | retract     |
* Gnuplot
Mainly to enable org-babel to execute [[http://www.gnuplot.info/][gnuplot]] blocks.
#+begin_src emacs-lisp
  (use-package gnuplot
    :ensure t
    :pin melpa-stable
    :config
    (setq gnuplot-progam "/usr/local/bin/gnuplot"))
#+end_src

| Binding   | Description    |
|-----------+----------------|
| `C-C C-c` | Compile buffer |
| `C-c C-b` | Run buffer     |
| `C-c C-r` | Run region     |
* Git changes indicator (diff-hl)

Package [[https://github.com/dgutov/diff-hl][diff-hl]] for highlighting uncommitted git changes.

#+begin_src emacs-lisp
  (use-package diff-hl
    :ensure t
    :pin melpa
    :config
    (global-diff-hl-mode)
    ;; Optional configuration, e.g., for dired
    (add-hook 'dired-mode-hook 'diff-hl-dired-mode))
#+end_src

* Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :pin melpa-stable
    :config
    (ivy-mode 1)
    (setq
     ivy-count-format " %d/%d "
     ivy-use-virtual-buffers t
     ivy-use-selectable-prompt t
     enable-recursive-minibuffers t
     projectile-completion-system 'ivy
     magit-completing-read-function 'ivy-completing-read)
    :bind
    (:map ivy-minibuffer-map
          ("<return>" . ivy-alt-done)))
#+END_SRC

* JavaScript
#+begin_src emacs-lisp
  (use-package js-mode
    :ensure nil
    :mode "\\.js\\'")
#+end_src

* ESLint
#+begin_src emacs-lisp
    (use-package eslint-rc
      :ensure t
      :pin melpa
      :hook
      ((typescript-mode . eslint-rc-mode)
       (js-mode . eslint-rc-mode)
       (web-mode . eslint-rc-mode)
       (svelte-mode . eslint-rc-mode))
      :config
      (setq
       eslint-rc-use-node-modules-bin t
       eslint-rc-use-eslintignore t
       eslint-rc-use-package-json t))
#+end_src
* Ledger
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t
    :pin melpa
    :init
    (setq ledger-reconcile-default-commodity "€"))
#+END_SRC
** Keys
| Binding       | Description                                      |
|---------------+--------------------------------------------------|
| `M-n`         | Next entry                                       |
| `M-p`         | Previous entry                                   |
| `C-c C-s`     | Sort all of the transactions in a region by date |
| `C-c C-r`     | Star reconciliation                              |
| `C-c C-o C-r` | Run report                                       |
* Langauge server (Eglot)

#+begin_src emacs-lisp
  (use-package eglot
     :ensure nil
     :config
     (add-to-list 'eglot-server-programs
                  '(python-mode . ("pyright-langserver" "--stdio")))
     (add-to-list 'eglot-server-programs
                  '((typescript-mode) "typescript-language-server" "--stdio"))
     (add-to-list 'eglot-server-programs
                  '(svelte-mode . ("svelteserver" "--stdio")))
     :hook
     ((css-mode . eglot-ensure)
      (js-mode . eglot-ensure)
      (python-mode . eglot-ensure)
      (typescript-mode . eglot-ensure)))
#+end_src

* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :pin melpa-stable
    :config
    (setq magit-status-sections-hook
          '(magit-insert-status-headers
            magit-insert-merge-log
            magit-insert-rebase-sequence
            magit-insert-am-sequence
            magit-insert-sequencer-sequence
            magit-insert-bisect-output
            magit-insert-bisect-rest
            magit-insert-bisect-log
            magit-insert-untracked-files
            magit-insert-unstaged-changes
            magit-insert-staged-changes
            magit-insert-stashes
            magit-insert-unpulled-from-upstream
            magit-insert-unpulled-from-pushremote
            magit-insert-unpushed-to-upstream
            magit-insert-unpushed-to-pushremote
            magit-insert-recent-commits))
    (setq magit-log-section-commit-count 20)
    :bind ("C-x g" . magit-status))
#+END_SRC

* Markdown mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :pin melpa-stable
    :init
    (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode)))
#+END_SRC
* Notmuch
#+BEGIN_SRC emacs-lisp
  (use-package notmuch
    :ensure t
    :pin melpa-stable
    :bind ("C-c m" . notmuch)
    :init
    (setq notmuch-saved-searches
          (quote
           ((:name "inbox" :query "tag:inbox AND -tag:sent" :key "i" :sort-order newest-first)
            (:name "sent" :query "tag:sent" :key "t" :sort-order newest-first)
            (:name "drafts" :query "tag:draft" :key "d")
            (:name "all mail" :query "*" :key "a" :sort-order newest-first))
           ))
    )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (autoload 'notmuch "notmuch" "notmuch mail" t)
#+END_SRC
** Keys
| Binding | Description                                                           |
|---------+-----------------------------------------------------------------------|
| `C-c m` | Open notmuch globally                                                 |
| `q`     | Kill the current Notmuch buffer and return you to the previous buffer |
| `=`     | Refresh buffer (eg. to display newly indexed emails)                  |
| `m`     | New message.                                                          |
| `s`     | Search interface                                                      |
| `c i`   | Stash message ID                                                      |
* Nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :ensure t
    :pin melpa
    :mode "\\.nix\\'")
#+end_src

* Olivetti
Minor mode for a nice writing environment that keeps the text in the middle of the window.
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :ensure t
    :pin melpa-stable)
#+END_SRC

* Org
Org files for capturing.

#+BEGIN_SRC emacs-lisp
  (setq
   todo-file (expand-file-name "gtd.org" org-directory)
   media-file (expand-file-name "media.org" org-directory)
   memex-file (expand-file-name "memex.org" org-directory)
   quote-file (expand-file-name "quote.org" org-directory))
#+END_SRC

Org mode's [[https://orgmode.org/manual/Capture-templates.html][caputre templates]] will be automatically filled with a set of [[https://orgmode.org/manual/Template-expansion.html][expansions]].

Changing todo states will invoke the option to take notes and track timestamps depending on [[https://orgmode.org/org.html#Tracking-TODO-state-changes-1][configuration]] using `@` and `!` in keyword definitions.

#+BEGIN_SRC emacs-lisp
  ;; Agenda view
  (setq
   org-agenda-inhibit-startup t
   org-agenda-show-future-repeats nil
   org-agenda-prefer-last-repeat nil
   org-agenda-start-on-weekday nil
   org-agenda-skip-deadline-if-done t
   org-agenda-skip-scheduled-if-done t
   org-agenda-block-separator "")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :pin elpa-gnu
    :preface
    (defun org-copy-link-at-point ()
      "Extract the link location at point and put it on the killring."
      (interactive)
      (when (org-in-regexp org-bracket-link-regexp 1)
        (kill-new (org-link-unescape (org-match-string-no-properties 1)))))
    :init
    (setq
     ;; Never split heading on RET
     org-M-RET-may-split-line '((default . nil))
     ;; Insert a new heading at the end of the current subtree.
     org-insert-heading-respect-content t
     ;; basic logging when a certain TODO item was marked as done
     org-log-done 'time
     ;; Enable syntax highlighting in #+BEGIN_SRC sections.
     org-src-fontify-natively t
     ;; Add log/notebook entries into :LOGBOOK: drawer.
     org-log-into-drawer t
     org-export-coding-system 'utf-8
     org-default-notes-file todo-file
     org-agenda-files (list todo-file)
     calendar-week-start-day 1
     org-completion-use-ido t
     ;; Indent text lines that are not headlines are prefixed with
     ;; spaces to vertically align with the headline text.
     org-startup-indented t
     org-startup-truncated t
     ;; Turn off manual indentation
     org-adapt-indentation t
     org-indent-indentation-per-level 1
     ;; Deactivate ‘^’ and ‘_’ to be used to indicate super- and subscripts
     org-use-sub-superscripts nil
     ;; Enable refiling of subtree up to 2nd level
     org-refile-targets '((todo-file :maxlevel . 2))
     ;; Use node names instead of their path
     org-refile-use-outline-path nil
     ;; Allow `a.`, `A.`, `a)` and `A)` list style
     org-list-allow-alphabetical t
     ;; Don’t ask every time when executing a code block.
     org-confirm-babel-evaluate nil
     org-src-tab-acts-natively t
     ;; enable rendering of pretty symbols in org buffers by default
     org-pretty-entities t)
    ;; Sync Google Calendar
    ;;(add-hook 'org-agenda-mode-hook (lambda () (org-gcal-fetch) ))
    ;;(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-fetch) ))
    (setq org-capture-templates
          '(("t" "Todo" entry
             (file+headline todo-file "Inbox")
             "* TODO %^{Title}\n:LOGBOOK:\n- Added: %U\n:END:\n:PROPERTIES:\n:URL: %^{URL}\n:END:\n%?")
            ("f" "Todo from file" entry
             (file+headline todo-file "Inbox")
             "* TODO %^{Title}\n:PROPERTIES:\n- File: [[%F][%f]]\n:END:\n:LOGBOOK:\n- Added: %U\n:END:\n%?")
            ("r" "Toread article" entry
             (file+headline media-file "Reading")
             "* SOMEDAY %^{Title} :READING:\n:PROPERTIES:\n:SOURCE: %^{Source}\n:END:\n:LOGBOOK:\n- Added: %U\n:END:")
            ("b" "Toread book" entry
             (file+headline media-file "Reading")
             "* SOMEDAY %^{Title} :READING:\n:PROPERTIES:\n:AUTHOR: %^{Author}\n:SOURCE: %^{Source}\n:END:\n:LOGBOOK:\n- Added: %U\n:END:")
            ("m" "Memex" entry
             (file memex-file)
             "* %^{Title}\n%?")
            ("q" "Quote" entry
             (file quote-file)
             "* %^{Quote}\n:PROPERTIES:\:AUTHOR: %^{Author}\:SOURCE: %^{Source}\:PAGE: %^{Page}\:END:\:LOGBOOK:\n- Added: %U\n:END:")
            )
          )
    (setq org-todo-keywords
          '((sequence "TODO(t!)" "NEXT(n!)" "|" "DONE(d@/!)")
            (sequence "WAITING(w@)" "SOMEDAY(s!)" "|")
            (sequence "|" "CANCELLED(c@)"))
          )
    :config
    (setq
     org-display-inline-images t
     org-redisplay-inline-images t
     org-startup-with-inline-images "inlineimages")
    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
    :bind
    (("C-c a" . org-agenda)
     ("C-c c" . org-capture)
     ("C-c C-;" . org-copy-link-at-point)))
#+END_SRC

Since version 9.2 `<s TAB` does not trigger the `#+BEGIN_SRC` [block](https://orgmode.org/manual/Structure-Templates.html#FOOT148). The following fix is taken from an issue [disussion](https://github.com/syl20bnr/spacemacs/issues/11798#issuecomment-456754071).

#+BEGIN_SRC emacs-lisp
  (when (version<= "9.2" (org-version))
    (require 'org-tempo))
#+END_SRC

** Keys

|---------------+------------------------------------------------|
| Binding       | Description                                    |
|---------------+------------------------------------------------|
| `C-c c`       | Open capture menue to select template.         |
| `C-c '`       | Open babel block in separate pop-up buffer.    |
| `C-c C-x C-i` | Clock-in on selected task                      |
| `C-c C-x C-o` | Clock-out of selected task                     |
| `C-u C-c C-s` | Unschedule agenda item                         |
| `C-u C-c C-d` | Undealine agenda item                          |
| `C-c C-w`     | Refile (move) subtree to new location          |
| `C-c M-w`     | Copy and refile (move) subtree to new location |
| `C-c C-x C-w` | Delete subtree and its contents                |
| `C-c C-x C-y` | Yank subtree and its contents                  |
| `r`           | Refresh agenda view                            |
| `C-c C-,`     | Add structural block #+BEGIN_... #+END_...     |
| `C-c o`       | Follow link at cursor position                 |
| `C-c C-x C-a` | Archive subtree                                |
| `C-c C-l`     | Insert a link                                  |
| `C-c C-o`     | Open link at point                             |
| `C-c C-t`     | Change status                                  |
| `C-c C-d`     | Toggle status                                  |
| `C-x n s`     | Narrow to task entry at cursor                 |
| `C-x n w`     | Return from narrow view (widen)                |

** Snippets

To render todays time tracking stats recorded using clock-in and clock-out.

#+BEGIN_SRC org
  ,#+BEGIN: clocktable :scope file :maxlevel 2 :block today
  ,#+END:
#+END_SRC

* Org Babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t)
     (clojure . t)
     (emacs-lisp . t)
     (gnuplot . t)
     (latex . t)
     (ledger . t)
     (js . t)
     (python . t)
     (shell . t)
     (typescript . t)))
#+END_SRC

#+begin_src emacs-lisp
  (use-package ob-http
    :after (org)
    :ensure t
    :pin melpa)
#+end_src

#+begin_src emacs-lisp
  (use-package ob-typescript
    :after (org)
    :ensure t
    :pin melpa)
#+end_src

* Org contrib

List of org-mode contributions such as `ob-ledger`.

#+begin_src emacs-lisp
  (use-package org-contrib
    :ensure t
    :pin elpa-nongnu)
#+end_src

* Org roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :pin melpa
    :hook
    (after-init . org-roam-mode)
    :init
    (setq
     org-roam-v2-ack t
     find-file-visit-truename t
     org-roam-directory (expand-file-name "roam/" org-directory)
     org-roam-dailies-directory (expand-file-name "roam/daily/" org-directory)
     org-roam-db-location (expand-file-name "roam/roam.sqlite" org-directory))
    :bind
    (("C-c n g" . org-roam-graph)
     ("C-c n t" . org-roam-tag-add)
     ("C-c n a" . org-roam-alias-add)
     ("C-c n f" . org-roam-node-find)
     ("C-c n l" . org-roam-buffer-toggle)
     ("C-c n i" . org-roam-node-insert)
     ("C-c n I" . org-roam-node-insert-immediate)
     ("C-c n d n" . org-roam-dailies-capture-today)
     ("C-c n d y" . org-roam-dailies-capture-yesterday)
     ("C-c n d t" . org-roam-dailies-capture-tomorrow)
     ("C-c n d d" . org-roam-dailies-capture-date)
     ("C-c n d f" . org-roam-dailies-goto-date)
     :map org-mode-map
     ("C-M-i" . completion-at-point))
    :config
    (setq
     org-roam-capture-templates
     '(("d" "default" plain "%?"
        :if-new (file+head "memex/${slug}.org"
                           "#+TITLE: ${title}\n#+ROAM_KEY: memex.${slug}\n#+ROAM_ALIAS: \n\n")
        :unnarrowed t)
       ("f" "fleet" plain "%?"
        :if-new (file+head "fleets/%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+TITLE: ${title}\n\n")
        :unnarrowed t)
       ("m" "media" plain "%?"
        :if-new (file+head "memex/${slug}.org"
                           "#+TITLE: ${title}\n#+ROAM_KEY: media.${slug} \n#+ROAM_ALIAS: \n\n#+AUTHOR: \n#+DATE: \n#+TAGS: \n#+URL: \n\n")
        :unnarrowed t)
       ("n" "note" plain "%?"
        :if-new (file+head "notes/%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+TITLE: ${title}\n#+ROAM_KEY: note.${slug}\n#+ROAM_ALIAS:\n\n#+AUTHOR: Steffen Fiedler\n#+DATE: %U\n\n")
        :unnarrowed t))
     org-roam-dailies-capture-templates
     '(("d" "default" entry
        "* %?"
        :target (file+head "%<%Y-%m-%d>.org"
                           "#+title: %<%Y-%m-%d>\n"))))
    (org-roam-db-autosync-mode))
#+end_src

** Keys

|-----------+--------------------------|
| Binding   | Description              |
|-----------+--------------------------|
| `C-c n i` | Insert (and create) node |
| `C-c n f` | Find node                |

* ox-gfm

Markdown exporter for org.

#+begin_src emacs-lisp
  (use-package ox-gfm
    :ensure t
    :pin melpa)
#+end_src

* Smartparens

Key mapping taken from https://ebzzry.com/en/emacs-pairs/.

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :pin melpa-stable
    :config
    (progn (show-smartparens-global-mode t))
    :bind
    (("C-M-a" . sp-beginning-of-sexp)
     ("C-M-e" . sp-end-of-sexp)

     ("C-<down>" . sp-down-sexp)
     ("C-<up>"   . sp-up-sexp)
     ("M-<down>" . sp-backward-down-sexp)
     ("M-<up>"   . sp-backward-up-sexp)

     ("C-M-f" . sp-forward-sexp)
     ("C-M-b" . sp-backward-sexp)

     ("C-M-n" . sp-next-sexp)
     ("C-M-p" . sp-previous-sexp)

     ("C-S-f" . sp-forward-symbol)
     ("C-S-b" . sp-backward-symbol)

     ("C-<right>" . sp-forward-slurp-sexp)
     ("M-<right>" . sp-forward-barf-sexp)
     ("C-<left>"  . sp-backward-slurp-sexp)
     ("M-<left>"  . sp-backward-barf-sexp)

     ("C-M-t" . sp-transpose-sexp)
     ("C-M-k" . sp-kill-sexp)
     ("C-k"   . sp-kill-hybrid-sexp)
     ("M-k"   . sp-backward-kill-sexp)
     ("C-M-w" . sp-copy-sexp)
     ("C-M-d" . delete-sexp)

     ("M-<backspace>" . backward-kill-word)
     ("C-<backspace>" . sp-backward-kill-word)

     ("M-[" . sp-backward-unwrap-sexp)
     ("M-]" . sp-unwrap-sexp)

     ("C-x C-t" . sp-transpose-hybrid-sexp)

     ("C-c ("  . wrap-with-parens)
     ("C-c ["  . wrap-with-brackets)
     ("C-c {"  . wrap-with-braces)
     ("C-c '"  . wrap-with-single-quotes)
     ("C-c \"" . wrap-with-double-quotes)
     ("C-c _"  . wrap-with-underscores)
     ("C-c `"  . wrap-with-back-quotes)))

  (add-hook 'org-mode-hook 'turn-on-smartparens-strict-mode)
  (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
  (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :ensure t
    :pin melpa-stable
    :config
    (projectile-global-mode)
    :bind-keymap
    (("C-c p" . projectile-command-map)))
#+END_SRC

* Spell checking

There is an issue with emacs accessing nix-managed aspell dictionaries. Therefore, we've to set the following env variable manually.

#+begin_src emacs-lisp
  (setenv "ASPELL_CONF"
          "dict-dir /nix/store/08nk2825349p9kwpznffh46dqvjlay8w-aspell-dict-en-2020.12.07-0/lib/aspell")
#+end_src

Run the following cmd to locate it.

#+begin_src shell
  find /nix/store -type f -name "en_US.multi" 2>/dev/null
#+end_src

Finally, config ispell with aspell.

#+begin_src emacs-lisp
  (setq ispell-program-name "aspell")
  (setq ispell-dictionary "en_US")
#+end_src

** Keys

| Binding   | Description            |
|-----------+------------------------|
| `C-c p p` | Jump to/select project |

* Python
#+BEGIN_SRC emacs-lisp
  (use-package python
    :ensure nil
    :mode ("\\.py\\'" . python-mode)
    :config
    (setq python-indent-offset 2)
    (setq python-shell-interpreter "python3")
    (setenv "PYTHONIOENCODING" "utf-8")
    (setenv "LANG" "en_US.UTF-8"))
#+END_SRC

* Rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :pin melpa-stable
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
* Restclient
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t
    :pin melpa
    :mode (("\\.http\\'" . restclient-mode))
    :bind (:map restclient-mode-map
                ("C-c C-f" . json-mode-beautify)))
#+END_SRC
* SMEX
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :pin melpa-stable)
#+END_SRC
* Svelte
#+BEGIN_SRC emacs-lisp
  (use-package svelte-mode
    :ensure t
    :pin melpa
    :mode "\\.svelte\\'"
    :config
    (add-hook 'svelte-mode-hook 'eglot-ensure))
#+END_SRC
* Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :pin melpa-stable
    :bind
    ("\C-s" . swiper)
    ("C-c C-r" . ivy-resume))
#+END_SRC
* Typescript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :ensure t
    :pin melpa-stable
    :mode (".ts$")
    :config
    (setq typescript-indent-level 2))
#+end_src
* Tide
#+begin_src emacs-lisp
  (use-package tide
    :ensure t
    :pin melpa
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)
           (before-save . tide-format-before-save)))
#+end_src
* Web mode
Prefere `web-mode` over `js-mode`.
#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :pin melpa-stable
    :mode
    (".css$"
     ".html$"
     ".tsx$")
    :config
    (setq
     web-mode-markup-indent-offset 2
     web-mode-css-indent-offset 2
     web-mode-code-indent-offset 2
     web-mode-enable-current-element-highlight t))
#+end_src
* Which key
[Which key](https://github.com/justbur/emacs-which-key) displays the key bindings following the currently entered incomplete command in a popup.
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :pin melpa-stable
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src
* Writing
** Special characters
| Binding   | Descirption |
|-----------+-------------|
| C-x 8 " o | ö           |
| C-x 8 " u | ü           |
| C-x 8 " U | Ü           |
| C-x 8 " s | ß           |
** Single space after periods
#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC
** Remove dangling whitespaces
When saving delete all trailing whitespaces.
#+BEGIN_SRC emacs-lisp
  (add-hook 'write-file-hooks 'delete-trailing-whitespace)
#+END_SRC
* Yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :pin melpa
    :mode ".yaml$")
#+end_src
* Writegood
Write clearly, easy to read, consice with the help of [[http://bnbeckwith.com/code/writegood-mode.html][writegood-mode]]. Inspired by [[https://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/][Matt Might's]] bash scripts.

Avoid common mistakes:
- Weasel Words
- Passive Voice
- Duplicated Words

#+begin_src emacs-lisp
  (use-package writegood-mode
    :ensure t
    :pin melpa
    :bind
    ("C-c g" . writegood-mode)
    ("C-c C-g g" . writegood-grade-level)
    ("C-c C-g e" . writegood-reading-ease))
#+end_src

| Binding | Description           |
|---------+-----------------------|
| `C-c g` | Toggle writegood-mode |
